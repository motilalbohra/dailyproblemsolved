class Solution {
    public int maximalRectangle(char[][] matrix) {
        int n = matrix[0].length;
        int[] arr = new int[n];
        int res = 0;
        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length; j++){
                if(matrix[i][j] == '1'){
                    arr[j] += 1;
                }
                else{
                    arr[j] = 0;
                }
            }
            res = Math.max(res,helper(arr));
        }
        return res; 
    }
    public int helper(int[] arr){
        Stack<Integer> st = new Stack<>();
        int res = 0;
        int n = arr.length;
        for(int i = 0; i <= n; i++){
            while(!st.isEmpty() && (i == n || arr[st.peek()] >= arr[i])){
                int h = arr[st.peek()];
                st.pop();
                int r = i;
                int wd;
                if(st.isEmpty()) wd = i;
                else wd = r - st.peek() - 1;
                res = Math.max(res, wd * h);
            }
            st.push(i);
        }
        return res;
    }
}