class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> res = new ArrayList<>();
        if(n == 1) return Collections.singletonList(0);
        int[] degree = new int[n];
        List<List<Integer>> adjList = new ArrayList<>();
        for(int i = 0; i < n; i++){
            adjList.add(new ArrayList<>());
        }
        for(int[] edge: edges){
            adjList.get(edge[0]).add(edge[1]);
            adjList.get(edge[1]).add(edge[0]);
            degree[edge[0]]++;
            degree[edge[1]]++;
        }
        Queue<Integer> leaves = new LinkedList<>();
        for(int i = 0; i < n; i++){
            if(degree[i] == 1){
                leaves.offer(i);
            }
        }
        while(n > 2){
            int size = leaves.size();
            n -= size;
            for(int i = 0; i < size; i++){
                int leaf = leaves.poll();
                for(int nb: adjList.get(leaf)){
                    if(--degree[nb] == 1){
                        leaves.offer(nb);
                    }
                }
            }
        }
        res.addAll(leaves);
        return res;
    }
}